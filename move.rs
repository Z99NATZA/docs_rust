/*
--------------------------------------------------
| move (1)
--------------------------------------------------
| ใน Rust ไม่มี Garbage Collector
| แต่ Rust มี ownership (ความเป็นเจ้าของ)
| เมื่อ ownership ถูก "move" ไปที่อื่น ตัวแปรต้นฉบับจะใช้ไม่ได้
| move คือทางออกที่ง่ายและปลอดภัย
--------------------------------------------------
*/

// ตัวอย่าง ownership แบบธรรมดา
fn main() {
    let s1 = String::from("Hello");
    let s2 = s1; // ย้าย ownership จาก s1 ไปให้ s2

    println!("{}", s2);
    println!("{}", s1); // ❌ s1 ใช้ไม่ได้แล้ว เพราะย้ายไป s2
}







/*
--------------------------------------------------
| move (2)
--------------------------------------------------
*/
fn main() {
    let s1 = String::from("World");
    let s2 = String::from("Z99NATZA");

    // closure
    let f = move || {
        println!("Hello {}", s1);
    };

    // ❌ พังตั้งแต่ตอนนี้เลย: s1 ถูก move เข้า closure แล้ว
    println!("{s1}"); 

    println!("{}", s2); 

    f();
}





/*
--------------------------------------------------
| move (3)
--------------------------------------------------
*/
fn main() {
    let mut s1 = String::from("World");
    let s2 = String::from("Z99NATZA");

    // ไม่ move
    let greet = || println!("Hello, {}", s1);
   
    greet(); // ✅ ปลอดภัย
    println!("{s1} {s2}"); // ✅ ปลอดภัย
   
    s1.push_str(" World"); // ❌ พังตั้งแต่ตอนนี้เลย
    // เพราะ greet ยังใช้ s1 ตัวเดิมอยู่
   
    greet();
}



/*
--------------------------------------------------
| move (4)
--------------------------------------------------
*/
fn main() {
    let s1 = String::from("World");
    let s2 = String::from("Z99NATZA");

    // move
    let greet = move || println!("Hello, {}", s1);

    // หลังจากนี้จะใช้ s1 ไม่ได้แล้ว เพราะ move ไปแล้ว

    println!("{s2}"); // ✅ ปลอดภัย
   
    greet(); // ✅ ปลอดภัย
}


/*
--------------------------------------------------
| move (5)
--------------------------------------------------
| thread ถูกสร้างใน main แต่ไปทำงาน "ที่อื่น" (scope ใหม่)
| ซึ่งอาจรันหลัง main จบไปแล้ว
*/
fn main() {
    let v = vec![1, 2, 3];

    let handle = thread::spawn(|| {
        println!("{:?}", v); // ❌ borrow ข้าม thread - เสี่ยงพัง
    });

    handle.join().unwrap();
}


/*
--------------------------------------------------
| move (6)
--------------------------------------------------
*/
fn main() {
    let v = vec![1, 2, 3];

    let handle = thread::spawn(move || {
        println!("{:?}", v); // ✅ ปลอดภัย: v เป็นของ thread แล้ว
    });

    handle.join().unwrap();
}

