// 2025-10-20 (ymd)

/*
--------------------------------------------------
| if (1)
--------------------------------------------------
| - ‡πÄ‡∏õ‡πá‡∏ô "expression" (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏Ñ‡πà statement)
| - ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô let x = if {...} else {...}
| - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏≤‡∏á‡∏ï‡∏£‡∏£‡∏Å‡∏∞ (boolean)
| - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô true ‚Üí ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà block
| - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô false ‚Üí ‡∏Ç‡πâ‡∏≤‡∏° block ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏õ else
| - ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô bool ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
--------------------------------------------------
*/

fn main() {
    let x = 10;

    if x > 5 {
        println!("x ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5");
    } else {
        println!("x ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5");
    }
}




/*
--------------------------------------------------
| if (2) - ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
--------------------------------------------------
| - ‡πÉ‡∏ä‡πâ else if ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
| - Rust ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏µ‡∏•‡∏∞ block ‡∏à‡∏≤‡∏Å‡∏ö‡∏ô‡∏•‡∏á‡∏•‡πà‡∏≤‡∏á
| - block ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô true ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
--------------------------------------------------
*/

let x = 0;

if x > 0 {
    println!("‡∏ö‡∏ß‡∏Å");
} else if x < 0 {
    println!("‡∏•‡∏ö");
} else {
    println!("‡∏®‡∏π‡∏ô‡∏¢‡πå");
}




/*
--------------------------------------------------
| if (3) - ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô expression ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤
--------------------------------------------------
| - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ if ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÑ‡∏î‡πâ
| - ‡πÅ‡∏ï‡πà‡∏•‡∏∞ branch (if / else) ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
--------------------------------------------------
*/

let result = if x > 5 { 100 } else { 200 };
println!("result = {}", result); // 100




/*
--------------------------------------------------
| if (4) - ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö Option / Result
--------------------------------------------------
| - ‡πÉ‡∏ä‡πâ if let ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö pattern ‡∏à‡∏≤‡∏Å enum ‡πÄ‡∏ä‡πà‡∏ô Some / Ok / Err
| - ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏≤‡∏Å handle ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (shortcut ‡∏Ç‡∏≠‡∏á match)
--------------------------------------------------
*/

let maybe_value = Some(42);

if let Some(v) = maybe_value {
    println!("‡πÄ‡∏à‡∏≠‡∏Ñ‡πà‡∏≤ {}", v);
}

let result: Result<i32, &str> = Err("error");

if let Err(e) = result {
    println!("‡πÄ‡∏à‡∏≠ error: {}", e);
}




/*
--------------------------------------------------
| if (5) - ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ã‡πâ‡∏≠‡∏ô
--------------------------------------------------
| - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡πâ‡∏≠‡∏ô if ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô if ‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏∑‡πà‡∏ô
| - ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ &&, || ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
--------------------------------------------------
*/

if x > 0 && x < 100 {
    println!("‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 1 ‡∏ñ‡∏∂‡∏á 99");
}




/*
--------------------------------------------------
| if (6) - ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö reference
--------------------------------------------------
| - ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Option ‡∏´‡∏£‡∏∑‡∏≠ Result ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ï‡πà‡∏≠
|   ‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏°‡∏î‡πâ‡∏ß‡∏¢ & ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ move ‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
--------------------------------------------------
*/

let data = Some(55);

if let Some(v) = &data {
    println!("‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Ñ‡πà‡∏≤: {}", v);
}

println!("{:?}", data); // ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ data ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ




/*
--------------------------------------------------
| if (‡∏™‡∏£‡∏∏‡∏õ)
--------------------------------------------------
| ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç boolean ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
| ‚úÖ ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô statement ‡πÅ‡∏•‡∏∞ expression
| ‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö Option / Result ‡∏ú‡πà‡∏≤‡∏ô if let
| ‚úÖ ‡∏ã‡πâ‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÑ‡∏î‡πâ (&&, ||)
| ‚úÖ ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
|
| ‚ùå ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô bool ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
| ‚ùå ‡∏ó‡∏∏‡∏Å branch ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö expression
| ‚ùå ‡πÑ‡∏°‡πà‡πÅ‡∏ó‡∏ô match ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ (‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏ö pattern ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏á match)
|
| üîπ ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏£‡∏£‡∏Å‡∏∞ ‡πÄ‡∏ä‡πà‡∏ô x > 0
| üîπ ‡πÉ‡∏ä‡πâ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Option ‡∏´‡∏£‡∏∑‡∏≠ Result ‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ
| üîπ ‡πÉ‡∏ä‡πâ return ‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÄ‡∏ä‡πà‡∏ô let n = if cond { a } else { b };
--------------------------------------------------
*/
