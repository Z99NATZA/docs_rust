// 2025-10-12 (ymd)

/*
--------------------------------------------------
| std::future::Future (1)
--------------------------------------------------
| Future = "‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à" ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
| ‡πÉ‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô Rust ‡πÉ‡∏ä‡πâ trait:
|
|   pub trait Future {
|       type Output;
|       fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;
|   }
|
| - poll() ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Poll::Pending ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
| - poll() ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Poll::Ready(T) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à
| - cx.waker() ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏•‡πÑ‡∏Å‡∏õ‡∏•‡∏∏‡∏Å‡πÉ‡∏´‡πâ executor ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ûoll‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°
| - Pin<&mut Self> : ‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á Future ‡∏°‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á "‡∏ï‡∏£‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á" (self-referential safety)
--------------------------------------------------
*/

/*
--------------------------------------------------
| std::future::Future (2) ‚Äî async/await
--------------------------------------------------
| ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î async ‡∏à‡∏∞ "‡∏™‡∏£‡πâ‡∏≤‡∏á Future ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
| ‡∏™‡πà‡∏ß‡∏ô await ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£ "‡∏£‡∏≠‡πÉ‡∏´‡πâ Future ‡πÄ‡∏™‡∏£‡πá‡∏à" (executor ‡∏à‡∏∞‡∏Ñ‡∏≠‡∏¢ poll ‡πÉ‡∏´‡πâ)
--------------------------------------------------
*/

use std::time::Duration;
use tokio::time::sleep;     // ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á runtime/IO non-blocking

async fn say_hello() -> String {
    sleep(Duration::from_millis(500)).await; // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏≠ IO
    "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡∏≤‡∏Å Future!".to_string()
}

#[tokio::main]
async fn main() {
    println!("‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°");
    let fut = say_hello();       // ‡πÅ‡∏Ñ‡πà "‡∏™‡∏£‡πâ‡∏≤‡∏á" Future (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á)
    println!("‡∏™‡∏£‡πâ‡∏≤‡∏á Future ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
    let result = fut.await;      // ‡∏ï‡∏≠‡∏ô await => executor ‡∏à‡∏∞ poll ‡∏à‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
    println!("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {result}");
}

/*
--------------------------------------------------
| std::future::Future (3) ‚Äî ‡∏£‡∏≠‡∏´‡∏•‡∏≤‡∏¢ Future ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
--------------------------------------------------
| Future ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ "‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å thread" (non-blocking)
| ‡πÄ‡∏£‡∏≤‡∏à‡∏∂‡∏á‡∏£‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ (‡πÄ‡∏ä‡πà‡∏ô join!)
--------------------------------------------------
*/

use tokio::join;

async fn task(name: &str, sec: u64) -> String {
    println!("{name} ‡πÄ‡∏£‡∏¥‡πà‡∏°...");
    sleep(Duration::from_secs(sec)).await;
    format!("{name} ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ô {sec}s")
}

#[tokio::main]
async fn demo_join() {
    let a = task("üçé ‡∏á‡∏≤‡∏ô A", 1);
    let b = task("üçå ‡∏á‡∏≤‡∏ô B", 2);
    let (ra, rb) = join!(a, b);  // await ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    println!("done:\n- {ra}\n- {rb}");
}

/*
--------------------------------------------------
| std::future::Future (4) ‚Äî ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Future ‡πÄ‡∏≠‡∏á (manual impl)
--------------------------------------------------
| ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Future ‡πÅ‡∏ö‡∏ö "‡∏Å‡∏≥‡∏´‡∏ô‡∏î poll ‡πÄ‡∏≠‡∏á"
| ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏´‡πà‡∏≠ tokio::time::Sleep ‡πÑ‡∏ß‡πâ‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß forward poll
| ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
| - ‡πÉ‡∏ä‡πâ Pin<Box<...>> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏±‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Future ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
| - executor ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å poll ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏á (‡∏ú‡πà‡∏≤‡∏ô await)
--------------------------------------------------
*/

use std::future::Future;
use std::pin::Pin;
use std::task::{Context, Poll};

struct Delay {
    inner: Pin<Box<tokio::time::Sleep>>,
}

impl Delay {
    fn new(d: Duration) -> Self {
        Self { inner: Box::pin(tokio::time::sleep(d)) }
    }
}

impl Future for Delay {
    type Output = ();

    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {
        // ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£ poll ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Sleep (‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ waker ‡πÄ‡∏≠‡∏á)
        match self.inner.as_mut().poll(cx) {
            Poll::Pending => Poll::Pending,
            Poll::Ready(_) => Poll::Ready(()),
        }
    }
}

#[tokio::main]
async fn demo_manual_future() {
    println!("‡πÄ‡∏£‡∏¥‡πà‡∏° Delay 300ms (Future ‡πÅ‡∏ö‡∏ö custom)");
    Delay::new(Duration::from_millis(300)).await; // await => executor ‡∏à‡∏∞ poll ‡πÉ‡∏´‡πâ‡∏à‡∏ô Ready
    println!("Delay ‡πÄ‡∏™‡∏£‡πá‡∏à!");
}

/*
--------------------------------------------------
| std::future::Future (5) ‚Äî ‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏±‡∏ß‡πÉ‡∏à
--------------------------------------------------
| - Future = ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏°‡∏µ Output ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°)
| - async fn = ‡∏ï‡∏±‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á Future ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
| - await = ‡∏£‡∏≠‡πÉ‡∏´‡πâ Future ‡πÄ‡∏™‡∏£‡πá‡∏à (executor ‡∏à‡∏∞ poll ‡πÉ‡∏´‡πâ)
| - Waker = ‡∏ï‡∏±‡∏ß‡∏õ‡∏•‡∏∏‡∏Å‡πÉ‡∏´‡πâ executor ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ûoll‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°
| - Pin = ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á Future ‡∏ó‡∏µ‡πà self-referential
|
| ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:
| - Thread: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ, ‡πÉ‡∏ä‡πâ CPU/OS thread ‡∏à‡∏£‡∏¥‡∏á
| - Future: ‡πÄ‡∏õ‡πá‡∏ô state machine; ‡∏à‡∏∞‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πá‡∏ï‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å poll (by executor)
--------------------------------------------------
*/
