// 16/10/2025 (dmy)


/*
--------------------------------------------------
| Trait (1)
--------------------------------------------------
| - Trait ‡∏Ñ‡∏∑‡∏≠ "‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°" (behavior) ‡∏´‡∏£‡∏∑‡∏≠ "‡∏™‡∏±‡∏ç‡∏ç‡∏≤" (contract)
| - ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ interface ‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏ä‡πà‡∏ô Java / Go / TypeScript
| - ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î method ‡∏ó‡∏µ‡πà struct (‡∏´‡∏£‡∏∑‡∏≠ type ‡∏≠‡∏∑‡πà‡∏ô) ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
| - ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô (method signature)
--------------------------------------------------
*/

trait Speak {
    fn speak(&self);
}




/*
--------------------------------------------------
| Trait (2)
--------------------------------------------------
| - Struct ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á implement trait
| - ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á impl TraitName for StructName
--------------------------------------------------
*/

struct Person {
    name: String,
}

impl Speak for Person {
    fn speak(&self) {
        println!("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏ä‡∏∑‡πà‡∏≠ {}", self.name);
    }
}

fn main() {
    let p = Person { name: "Z99NATZA".into() };
    p.speak();
}




/*
--------------------------------------------------
| Trait (3)
--------------------------------------------------
| - Trait ‡∏°‡∏µ "default implementation" ‡πÑ‡∏î‡πâ
| - Struct ‡∏ó‡∏µ‡πà impl trait ‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ default ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
| - ‡∏´‡∏£‡∏∑‡∏≠ override method ‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ
--------------------------------------------------
*/

trait Greet {
    fn hello(&self) {
        println!("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö!");
    }
}

struct Dog;

impl Greet for Dog {} // ‡πÉ‡∏ä‡πâ default method

fn main() {
    let d = Dog;
    d.hello(); // ‡πÅ‡∏™‡∏î‡∏á "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö!"
}




/*
--------------------------------------------------
| Trait (4)
--------------------------------------------------
| - Trait Bound: ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Generic Function
| - ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ß‡πà‡∏≤ type ‡∏ô‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ trait ‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß
--------------------------------------------------
*/

trait Shape {
    fn area(&self) -> f64;
}

struct Circle { r: f64 }
impl Shape for Circle {
    fn area(&self) -> f64 {
        3.14 * self.r * self.r
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ type ‡∏ó‡∏µ‡πà‡∏°‡∏µ Shape
fn print_area<T: Shape>(item: T) {
    println!("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà = {}", item.area());
}




/*
--------------------------------------------------
| Trait (5)
--------------------------------------------------
| - Trait Inheritance: Trait ‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
| - Trait ‡∏ó‡∏µ‡πà‡∏™‡∏∑‡∏ö‡∏ï‡πà‡∏≠ ‡∏ï‡πâ‡∏≠‡∏á implement ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß
--------------------------------------------------
*/

trait Drawable {
    fn draw(&self);
}

trait Shape: Drawable {
    fn area(&self) -> f64;
}

struct Rectangle { w: f64, h: f64 }

impl Drawable for Rectangle {
    fn draw(&self) {
        println!("‡∏ß‡∏≤‡∏î‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏Ç‡∏ô‡∏≤‡∏î {}x{}", self.w, self.h);
    }
}

impl Shape for Rectangle {
    fn area(&self) -> f64 {
        self.w * self.h
    }
}




/*
--------------------------------------------------
| Trait (6)
--------------------------------------------------
| - Trait Object: ‡πÉ‡∏ä‡πâ polymorphism runtime
| - ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏•‡∏≤‡∏¢ struct ‡∏ó‡∏µ‡πà‡∏°‡∏µ trait ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÉ‡∏ô Vec<Box<dyn Trait>>
--------------------------------------------------
*/

fn main() {
    let shapes: Vec<Box<dyn Shape>> = vec![
        Box::new(Rectangle { w: 4.0, h: 5.0 }),
        Box::new(Rectangle { w: 2.0, h: 3.0 }),
    ];

    for s in shapes {
        s.draw();
        println!("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà = {}", s.area());
    }
}




/*
--------------------------------------------------
| Trait (7)
--------------------------------------------------
| - Associated Type: trait ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏≥‡∏´‡∏ô‡∏î type ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ
| - ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á generic parameter
--------------------------------------------------
*/

trait Iterator {
    type Item;
    fn next(&mut self) -> Option<Self::Item>;
}

struct Counter { current: u32 }

impl Iterator for Counter {
    type Item = u32;
    fn next(&mut self) -> Option<Self::Item> {
        self.current += 1;
        Some(self.current)
    }
}




/*
--------------------------------------------------
| Trait (8)
--------------------------------------------------
| - Blanket Implementation: implement trait ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å type
| - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô Rust (impl ToString for ‡∏ó‡∏∏‡∏Å type ‡∏ó‡∏µ‡πà‡∏°‡∏µ Display)
--------------------------------------------------
*/

use std::fmt::Display;

impl<T: Display> ToString for T {
    fn to_string(&self) -> String {
        format!("{}", self)
    }
}




/*
--------------------------------------------------
| Trait (9)
--------------------------------------------------
| - Static Dispatch vs Dynamic Dispatch
|
| Static Dispatch:
|   - ‡πÉ‡∏ä‡πâ generic + trait bound ‡πÄ‡∏ä‡πà‡∏ô <T: Trait>
|   - compile-time ‡∏£‡∏π‡πâ type ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
|   - ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤
|
| Dynamic Dispatch:
|   - ‡πÉ‡∏ä‡πâ Box<dyn Trait>
|   - runtime ‡∏ï‡∏£‡∏ß‡∏à type
|   - ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Å‡∏ß‡πà‡∏≤
--------------------------------------------------
*/

fn calc_area<T: Shape>(s: &T) -> f64 { // Static Dispatch
    s.area()
}

fn draw_shape(s: &dyn Shape) { // Dynamic Dispatch
    s.draw();
}




/*
--------------------------------------------------
| Trait (‡∏™‡∏£‡∏∏‡∏õ)
--------------------------------------------------
| ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏° (behavior) ‡∏ó‡∏µ‡πà type ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
| ‚úÖ ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ struct ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ polymorphism
| ‚úÖ ‡πÉ‡∏™‡πà default method ‡πÑ‡∏î‡πâ
| ‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö generics ‡∏ú‡πà‡∏≤‡∏ô trait bound
| ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡∏ö‡∏ó‡∏≠‡∏î trait ‡∏≠‡∏∑‡πà‡∏ô (trait inheritance)
| ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö associated type ‡πÅ‡∏•‡∏∞ blanket impl
|
| üîπ impl Trait for Struct = ‡∏ó‡∏≥‡πÉ‡∏´‡πâ struct ‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏° trait ‡∏ô‡∏±‡πâ‡∏ô
| üîπ dyn Trait = ‡πÉ‡∏ä‡πâ polymorphism runtime
| üîπ <T: Trait> = ‡∏à‡∏≥‡∏Å‡∏±‡∏î generic ‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ type ‡∏ó‡∏µ‡πà‡∏°‡∏µ trait
--------------------------------------------------
*/
