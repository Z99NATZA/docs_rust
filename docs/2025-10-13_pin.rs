// 2025-10-13 (ymd)



/*
--------------------------------------------------
| Pin (1)
--------------------------------------------------
| - `Pin` ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ "‡∏ï‡∏£‡∏∂‡∏á‡∏Ñ‡πà‡∏≤" (prevent move) 
|   ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢
| - ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤ pointer/reference ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
| - ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏Å‡∏±‡∏ö type ‡∏ó‡∏µ‡πà !Unpin
|   ‡πÄ‡∏ä‡πà‡∏ô Future, Generator, ‡∏´‡∏£‡∏∑‡∏≠ struct ‡∏ó‡∏µ‡πà‡∏°‡∏µ self-reference
| - ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö pointer-like type ‡πÄ‡∏ä‡πà‡∏ô &mut, Box, Rc, Arc
--------------------------------------------------
*/

use std::pin::Pin;

fn main() {
    let mut s = String::from("Hello");
    let p = Pin::new(&mut s); // Pin<&mut String>
}





/*
--------------------------------------------------
| Pin (2)
--------------------------------------------------
| - ‡∏ó‡∏≥‡πÑ‡∏°‡∏ï‡πâ‡∏≠‡∏á Pin ?
--------------------------------------------------
| - ‡πÉ‡∏ô Rust ‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ñ‡πà‡∏≤ (value) ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢ (move) ‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠
|   ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô, return, ‡∏´‡∏£‡∏∑‡∏≠ assign ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏´‡∏°‡πà
| - ‡πÅ‡∏ï‡πà‡∏ö‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô Future ‡∏´‡∏£‡∏∑‡∏≠ struct ‡∏ó‡∏µ‡πà‡∏°‡∏µ self-reference
|   ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ move ‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
| - `Pin` ‡∏à‡∏∂‡∏á‡πÄ‡∏õ‡πá‡∏ô wrapper ‡πÄ‡∏û‡∏∑‡πà‡∏≠ "‡∏´‡πâ‡∏≤‡∏°‡∏¢‡πâ‡∏≤‡∏¢" ‡∏Ñ‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
--------------------------------------------------
*/

async fn run() {}
let fut = run();               // Future
let pinned = Box::pin(fut);    // ‚úÖ Future ‡∏ñ‡∏π‡∏Å Pin ‡∏ö‡∏ô heap ‡πÅ‡∏•‡πâ‡∏ß




/*
--------------------------------------------------
| Pin (3)
--------------------------------------------------
| - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Pin ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÑ‡∏î‡πâ‡∏ö‡πà‡∏≠‡∏¢
--------------------------------------------------
| - Pin<&mut T>   ‚Üí ‡∏ï‡∏£‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô stack
| - Pin<Box<T>>   ‚Üí ‡∏ï‡∏£‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô heap
| - Pin<Arc<T>>   ‚Üí ‡∏ï‡∏£‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏£‡πå‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ (reference counted)
| - Pin<T>        ‚Üí ‡∏ï‡∏£‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤ T: Unpin ‚Üí ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•)
--------------------------------------------------
*/

let mut s = String::from("Hello");
let p1 = Pin::new(&mut s);            // Stack
let p2 = Box::pin(String::from("X")); // Heap




/*
--------------------------------------------------
| Pin (4)
--------------------------------------------------
| - Unpin ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£ ?
--------------------------------------------------
| - ‡∏ñ‡πâ‡∏≤ type ‡∏ô‡∏±‡πâ‡∏ô implement Unpin 
|   ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏¢‡πâ‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
| - ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô Pin<T> ‡∏Ç‡∏≠‡∏á type ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Unpin
|   "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏≠‡∏∞‡πÑ‡∏£" (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ move ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏î‡∏µ)
| - ‡πÄ‡∏ä‡πà‡∏ô String, Vec<T>, i32, f64 ‚Üí ‡πÄ‡∏õ‡πá‡∏ô Unpin
| - Future ‡∏à‡∏≤‡∏Å async ‚Üí !Unpin (‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)
--------------------------------------------------
*/

let s = String::from("Hello"); // ‚úÖ String: Unpin
let p = Pin::new(s);           // ‚úÖ Pin ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà move ‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°





/*
--------------------------------------------------
| Pin (5)
--------------------------------------------------
| - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
--------------------------------------------------
| - ‡∏ñ‡πâ‡∏≤ Pin ‡∏Ñ‡∏£‡∏≠‡∏ö pointer ‡πÅ‡∏ö‡∏ö &mut T:
|     ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á T ‡∏ñ‡∏π‡∏Å "‡∏¢‡∏∑‡∏°‡πÅ‡∏ö‡∏ö mutable" ‡πÅ‡∏•‡∏∞ "‡∏ï‡∏£‡∏∂‡∏á"
|     ‡∏´‡πâ‡∏≤‡∏° move ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ï‡∏∞‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô borrow
|
| - ‡πÉ‡∏ä‡πâ b ‡∏´‡∏£‡∏∑‡∏≠ a ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô
--------------------------------------------------
*/

let mut a = String::from("Hello");
let b = Pin::new(&mut a);

// ‚ùå a ‡∏¢‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡πÅ‡∏ö‡∏ö mutable ‡πÇ‡∏î‡∏¢ b
// println!("{a}"); // error

println!("{}", b.as_ref().get_ref()); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ú‡πà‡∏≤‡∏ô Pin ‡πÑ‡∏î‡πâ





/*
--------------------------------------------------
| Pin (6)
--------------------------------------------------
| - ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Pin ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
--------------------------------------------------
| - ‡πÉ‡∏ä‡πâ `.as_ref()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏ö‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (&T)
| - ‡πÉ‡∏ä‡πâ `.as_mut()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (&mut T)
| - ‡πÉ‡∏ä‡πâ `.get_ref()` ‡∏´‡∏£‡∏∑‡∏≠ `.get_mut()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á reference ‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô
|   (‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö type)
--------------------------------------------------
*/

let mut s = String::from("Hello");
let p = Pin::new(&mut s);

println!("{}", p.as_ref().get_ref()); // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô
p.as_mut().get_mut().push_str("!");   // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç



/*
--------------------------------------------------
| Pin (7)
--------------------------------------------------
| - Move ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?
--------------------------------------------------
| - ‡∏¢‡πâ‡∏≤‡∏¢ (move) ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß wrapper Pin ‡πÄ‡∏≠‡∏á
|   ‡πÅ‡∏ï‡πà "‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô" ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢
| - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
--------------------------------------------------
*/

let p1 = Box::pin(String::from("Hello"));
let p2 = p1; // ‚úÖ move wrapper ‡πÑ‡∏î‡πâ
// ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á String ‡∏ö‡∏ô heap ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô



/*
--------------------------------------------------
| Pin (8)
--------------------------------------------------
| - ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
--------------------------------------------------
| - ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏∂‡∏á Future ‡∏Å‡πà‡∏≠‡∏ô await ‡∏´‡∏£‡∏∑‡∏≠ poll
| - ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô runtime (tokio, async-std)
| - ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô generator ‡∏´‡∏£‡∏∑‡∏≠ self-referential struct
--------------------------------------------------
*/

use std::{pin::Pin, future::Future};

fn make_future() -> Pin<Box<dyn Future<Output = ()>>> {
    Box::pin(async {
        println!("Running...");
    })
}




/*
--------------------------------------------------
| Pin (9)
--------------------------------------------------
| - ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡πâ‡∏ô ‡πÜ
--------------------------------------------------
| ‚úÖ Pin ‡∏Ñ‡∏∑‡∏≠ "‡∏ï‡∏±‡∏ß‡∏ï‡∏£‡∏∂‡∏á" ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
| ‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡πâ‡∏≤‡∏°‡∏¢‡πâ‡∏≤‡∏¢ wrapper ‡πÄ‡∏≠‡∏á
| ‚öôÔ∏è ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö pointer-like type (&mut, Box, Arc)
| üß† ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö type ‡∏ó‡∏µ‡πà !Unpin ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô dangling pointer
| üîí ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
--------------------------------------------------
*/
