// 2025-10-17 (ymd)


/*
--------------------------------------------------
| Vec (1)
--------------------------------------------------
| - Vec ‡∏Ñ‡∏∑‡∏≠ dynamic array (‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô)
| - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô i32, String)
| - ‡πÄ‡∏û‡∏¥‡πà‡∏° / ‡∏•‡∏ö / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏±‡∏ô
| - ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô heap memory
| - ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ list ‡∏Ç‡∏≠‡∏á Python ‡∏´‡∏£‡∏∑‡∏≠ vector ‡∏Ç‡∏≠‡∏á C++
--------------------------------------------------
*/

fn main() {
    let mut v = Vec::new();  // ‡∏™‡∏£‡πâ‡∏≤‡∏á vector ‡∏ß‡πà‡∏≤‡∏á
    v.push(10);
    v.push(20);
    v.push(30);

    println!("{:?}", v); // [10, 20, 30]
}




/*
--------------------------------------------------
| Vec (2) - ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á
--------------------------------------------------
| - ‡πÉ‡∏ä‡πâ macro vec![...] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
| - ‡πÉ‡∏ä‡πâ ::new() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏á
| - ‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
--------------------------------------------------
*/

let v1 = vec![1, 2, 3];
let mut v2: Vec<String> = Vec::new();
v2.push(String::from("Hello"));
v2.push(String::from("Rust"));

println!("{:?}", v1);
println!("{:?}", v2);




/*
--------------------------------------------------
| Vec (3) - ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
--------------------------------------------------
| - [] ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏≠‡∏≤‡∏à panic ‡∏ñ‡πâ‡∏≤ index ‡πÄ‡∏Å‡∏¥‡∏ô)
| - get() ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Option<T> (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤)
| - ‡πÉ‡∏ä‡πâ &mut v ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏Ñ‡πà‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÉ‡∏ô‡∏•‡∏π‡∏õ‡πÑ‡∏î‡πâ
--------------------------------------------------
*/

let mut v = vec![10, 20, 30];

println!("{}", v[1]);      // 20
println!("{:?}", v.get(2)); // Some(30)

for n in &v {
    println!("‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤: {}", n);
}

for n in &mut v {
    *n += 5; // ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà * ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á
}

println!("{:?}", v); // [15, 25, 35]




/*
--------------------------------------------------
| Vec (4) - ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
--------------------------------------------------
| - pop() ‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å
| - clear() ‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡πà‡∏≤
| - contains(&x) ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ x ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
| - len() ‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
--------------------------------------------------
*/

let mut v = vec![1, 2, 3, 4];
v.pop(); // ‡∏•‡∏ö 4
println!("{:?}", v); // [1, 2, 3]

println!("len = {}", v.len());
println!("‡∏°‡∏µ‡πÄ‡∏•‡∏Ç 2? {}", v.contains(&2));




/*
--------------------------------------------------
| Vec (5) - Ownership ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤
--------------------------------------------------
| - for n in v ‡∏à‡∏∞ "move" ‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å v
| - v ‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏•‡∏π‡∏õ
| - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å move ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ &v ‡∏´‡∏£‡∏∑‡∏≠ &mut v
--------------------------------------------------
*/

let v = vec![10, 20, 30];

for n in v {
    println!("{}", n);
}
println!("{:?}", v); // ‚ùå ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß v ‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ô‡∏•‡∏π‡∏õ




/*
--------------------------------------------------
| Vec (6) - Clone ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å
--------------------------------------------------
| - ‡πÉ‡∏ä‡πâ .clone() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á Vec
| - ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
--------------------------------------------------
*/

let v1 = vec![100, 200, 300];
let v2 = v1.clone();

println!("v1 = {:?}, v2 = {:?}", v1, v2);




/*
--------------------------------------------------
| Vec (‡∏™‡∏£‡∏∏‡∏õ)
--------------------------------------------------
| ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤
| ‚úÖ ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (dynamic)
| ‚úÖ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ vec![]
| ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° (& / &mut) ‡πÅ‡∏•‡∏∞ clone
|
| ‚ùå ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏ô Vec ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡πÉ‡∏ä‡πâ enum)
|
| üîπ Vec::new() ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á vector ‡∏ß‡πà‡∏≤‡∏á
| üîπ vec![x, y, z] ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πà‡∏≤
| üîπ push() / pop() ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏° / ‡∏•‡∏ö‡∏ó‡πâ‡∏≤‡∏¢
| üîπ get(i) ‚Üí ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
| üîπ &v / &mut v ‚Üí ‡∏¢‡∏∑‡∏°‡∏≠‡πà‡∏≤‡∏ô / ‡∏¢‡∏∑‡∏°‡πÅ‡∏Å‡πâ
| üîπ clone() ‚Üí ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
--------------------------------------------------
*/
