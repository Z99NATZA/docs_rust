// 2025-10-18 (ymd)

/*
--------------------------------------------------
| &'static str vs &str
--------------------------------------------------
| ❖ ทั้งคู่เป็น "string slice" → reference ที่ชี้ไปยังข้อความ
| ❖ ต่างกันที่ lifetime และที่มาของข้อมูล
--------------------------------------------------
*/

/*
--------------------------------------------------
| &'static str
--------------------------------------------------
| - lifetime = 'static (อยู่ตลอดอายุโปรแกรม)
| - ชี้ไปที่ string literal ใน read-only memory
| - compiler สร้างไว้ตั้งแต่ compile time
| - ใช้ซ้ำได้ไม่ต้อง clone / ไม่ต้อง free
| - ตัวอย่าง: let s: &'static str = "Hello";
--------------------------------------------------
*/

/*
--------------------------------------------------
| &str
--------------------------------------------------
| - lifetime = ขึ้นอยู่กับตัวที่อ้างถึง (ไม่ถาวร)
| - อาจชี้ไปที่ข้อมูลใน String, ตัวแปร, หรือ slice ชั่วคราว
| - ถูก drop ได้เมื่อเจ้าของข้อมูลหมดอายุ
| - ตัวอย่าง: 
|   let s = String::from("Hi");
|   let r: &str = &s;
--------------------------------------------------
*/



/*
--------------------------------------------------
| &'static str (ตัวอย่าง)
--------------------------------------------------
*/

fn main() {
    let s1: &'static str = "สวัสดี"; // literal
    let s2 = s1; // copy pointer
    println!("{s1}, {s2}");
}



/*
--------------------------------------------------
| &str (ตัวอย่าง)
--------------------------------------------------
| - สร้างจาก String (เจ้าของคือ String)
| - reference มีอายุเท่ากับตัว String
| - ถ้า String ถูก drop → reference ใช้ไม่ได้
--------------------------------------------------
*/

fn main() {
    let s = String::from("Rust");
    let slice: &str = &s; // ยืมอ้างอิงจาก String
    println!("{}", slice);
    // เมื่อ s หมด scope → slice ใช้ไม่ได้
}



/*
--------------------------------------------------
| เปรียบเทียบหน่วยความจำ
--------------------------------------------------
|
|   ┌──────────────────────────────┐
|   │ read-only memory (binary)    │
|   │  └── "Hello"                 │ ← &'static str
|   └──────────────────────────────┘
|
|   ┌──────────────────────────────┐
|   │ heap (dynamic)               │
|   │  └── "Hello" (String)        │ ← &str (อ้างอิง)
|   └──────────────────────────────┘
|
--------------------------------------------------
*/



/*
--------------------------------------------------
| สรุปความต่าง: &'static str
--------------------------------------------------
|
| 🔹 &'static str
|    ┌─ Lifetime: อยู่ตลอดโปรแกรม ('static)
|    ├─ Ownership: ไม่มี
|    ├─ แหล่งข้อมูล: Literal / static memory
|    ├─ อยู่ใน memory: Read-only memory
|    ├─ Clone จำเป็นไหม: ❌ ไม่จำเป็น (Copy)
|    ├─ ใช้ข้าม thread ได้: ✅ ได้
|    └─ แก้ไขค่าได้ไหม: ❌ ไม่ได้
|
--------------------------------------------------
*/

/*
--------------------------------------------------
| สรุปความต่าง: &str
--------------------------------------------------
|
| 🔹 &str
|    ┌─ Lifetime: ตามตัวที่อ้างถึง (สั้นกว่า)
|    ├─ Ownership: ไม่มี
|    ├─ แหล่งข้อมูล: String / temporary data
|    ├─ อยู่ใน memory: Heap (ถ้าอ้างจาก String)
|    ├─ Clone จำเป็นไหม: ❌ ไม่จำเป็น (Copy)
|    ├─ ใช้ข้าม thread ได้: ⚠️ ได้ถ้า lifetime ปลอดภัย
|    └─ แก้ไขค่าได้ไหม: ❌ ไม่ได้
|
--------------------------------------------------
*/



/*
--------------------------------------------------
| สรุปสุดท้าย
--------------------------------------------------
| ✅ &'static str:
|    - ใช้สำหรับข้อความคงที่ เช่น "Hello"
|    - อยู่ตลอดอายุโปรแกรม
|    - เหมาะกับค่า constant หรือ static
|
| ✅ &str:
|    - ใช้กับ String ที่สร้างตอนรัน
|    - อายุเท่ากับตัวเจ้าของข้อมูล
|    - เหมาะกับการอ้างอิงข้อมูลชั่วคราว
--------------------------------------------------
*/
