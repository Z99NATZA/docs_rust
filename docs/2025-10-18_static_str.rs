// 2025-10-18 (ymd)

/*
--------------------------------------------------
| &'static str (1)
--------------------------------------------------
| - ‡∏Ñ‡∏∑‡∏≠ "string slice" ‡∏ó‡∏µ‡πà‡∏°‡∏µ lifetime = 'static
| - ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ï‡∏•‡∏≠‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
| - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö string literal ‡πÄ‡∏ä‡πà‡∏ô "Hello", "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"
| - ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (borrowed reference)
| - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô read-only memory (binary segment)
| - ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á clone()
| - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (immutable)
--------------------------------------------------
*/

fn main() {
    let msg: &'static str = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"; // literal ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
    println!("{}", msg);
}




/*
--------------------------------------------------
| &'static str (2) - ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á
--------------------------------------------------
| - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å string literal ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÄ‡∏ä‡πà‡∏ô "Z99NATZA"
| - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ new() ‡∏´‡∏£‡∏∑‡∏≠ from()
| - compiler ‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÅ‡∏ö‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£
--------------------------------------------------
*/

let a: &'static str = "Z99NATZA";
let b = "Dev"; // compiler ‡πÉ‡∏™‡πà &'static str ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
println!("{} {}", a, b);




/*
--------------------------------------------------
| &'static str (3) - ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠
--------------------------------------------------
| - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á clone() ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏ô‡∏¥‡∏î Copy
| - ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ = ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å pointer ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
| - ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ó‡∏µ‡πà ‡πÑ‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ß moved
--------------------------------------------------
*/

let s1: &'static str = "Rust";
let s2 = s1;   // copy pointer
let s3 = "Rust"; // literal ‡πÄ‡∏î‡∏¥‡∏°, memory ‡πÄ‡∏î‡∏¥‡∏°

println!("{s1}, {s2}, {s3}");
println!("‡∏ä‡∏µ‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô? {}", std::ptr::eq(s1, s3)); // true




/*
--------------------------------------------------
| &'static str (4) - ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö String
--------------------------------------------------
| - String ‚Üí ‡∏°‡∏µ ownership / ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô heap / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
| - &'static str ‚Üí ‡πÑ‡∏°‡πà‡∏°‡∏µ ownership / ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô read-only memory
| - ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ to_string() ‡∏´‡∏£‡∏∑‡∏≠ String::from()
--------------------------------------------------
*/

let s_static: &'static str = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ";
let mut s_string: String = s_static.to_string();

s_string.push_str(" Rust!"); // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ String
println!("{}", s_string);




/*
--------------------------------------------------
| &'static str (5) - ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
--------------------------------------------------
| - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏á‡∏ó‡∏µ‡πà (constant / static)
| - ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô static variables, enum, match arms
| - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≤‡∏° thread ‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ lifetime = 'static
--------------------------------------------------
*/

static GREETING: &'static str = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡∏≤‡∏Å static!";

fn get_message() -> &'static str {
    "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏•‡∏≠‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"
}

fn main() {
    println!("{}", GREETING);
    println!("{}", get_message());
}




/*
--------------------------------------------------
| &'static str (‡∏™‡∏£‡∏∏‡∏õ)
--------------------------------------------------
| ‚úÖ ‡πÄ‡∏õ‡πá‡∏ô string slice ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£
| ‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô read-only memory
| ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á clone() ‡∏´‡∏£‡∏∑‡∏≠ free()
| ‚úÖ ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠ / ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥ / ‡∏Ç‡πâ‡∏≤‡∏° thread ‡πÑ‡∏î‡πâ
|
| ‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
| ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ ownership (‡πÅ‡∏Ñ‡πà‡∏¢‡∏∑‡∏°‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á)
|
| üîπ ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô "Hello"
| üîπ ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô static variable ‡∏´‡∏£‡∏∑‡∏≠ return function ‡∏ó‡∏µ‡πà‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤
| üîπ ‡πÉ‡∏ä‡πâ std::ptr::eq(a,b) ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ä‡∏µ‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
| üîπ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô String ‡∏î‡πâ‡∏ß‡∏¢ .to_string()
--------------------------------------------------
*/
