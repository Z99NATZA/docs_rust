// 2025-10-12 (ymd)

/*
--------------------------------------------------
| async / await & Future (1)
--------------------------------------------------
| - Future คือ "งานที่ยังไม่เสร็จ" (ยังไม่เกิดตอนนี้) 
|   แต่จะเสร็จในอนาคต เมื่อถึงเวลาหรือเมื่อ executor 
|   (เช่น tokio) มาคอย poll ให้มันทำงานจนจบ
|
| - async fn จะสร้าง Future โดยอัตโนมัติ
|   await คือการ "รอให้ Future นั้นเสร็จ"
--------------------------------------------------
*/

async fn say_hello() -> String {
    "สวัสดีจาก Future!".to_string()
}








/*
--------------------------------------------------
| async / await & Future (2)
--------------------------------------------------
| - ตอนเรียก say_hello() -> จะได้ "Future" กลับมา
|   ยังไม่รันจริง จนกว่าเราจะ .await มัน
--------------------------------------------------
*/

#[tokio::main]
async fn main() {
    println!("เริ่มโปรแกรม");

    let fut = say_hello(); // สร้าง Future (แต่ยังไม่ทำงาน)
    println!("สร้าง Future แล้ว... แต่ยังไม่รัน");

    let result = fut.await; // รอ Future ทำงานจนเสร็จ
    println!("ผลลัพธ์: {result}");
}






/*
--------------------------------------------------
| async / await & Future (3)
--------------------------------------------------
| - Future ทำงานแบบไม่บล็อก thread (non-blocking)
|   ทำให้สามารถรันหลายงานพร้อมกันได้ใน thread เดียว
|
| - ตัวอย่างเช่น ใช้ tokio::join! เพื่อรอหลาย Future พร้อมกัน
--------------------------------------------------
*/

use std::time::Duration;
use tokio::time::sleep;

async fn task(name: &str, sec: u64) -> String {
    println!("{name} เริ่มทำงาน...");
    sleep(Duration::from_secs(sec)).await;
    format!("{name} เสร็จหลัง {sec} วินาที")
}

#[tokio::main]
async fn example_join() {
    let a = task("งาน A", 2);
    let b = task("งาน B", 3);

    let (ra, rb) = tokio::join!(a, b);
    println!("ทั้งหมดเสร็จแล้ว:\n - {ra}\n - {rb}");
}





/*
--------------------------------------------------
| async / await & Future (4)
--------------------------------------------------
| สรุปสั้น ๆ
| - Future = งานที่ยังไม่เสร็จ (รอเวลา / รอ I/O)
| - async fn = ฟังก์ชันที่คืนค่า Future
| - await = สั่งให้ Future ทำงานจริงและรอผลลัพธ์
| - Executor (เช่น tokio) = ตัวจัดการ Future ให้ทำงานทีละนิด
|
| Future ต่างจาก Thread:
| - Thread = ทำงานทันที (ใช้ CPU จริง)
| - Future = แค่ "แผนงาน" ต้องมี executor มารันให้
--------------------------------------------------
*/
