/*
--------------------------------------------------
| smart pointer (Arc) (1)
--------------------------------------------------
| Arc (ย่อมาจาก Atomic Reference Counted) 
| คือ Smart Pointer ตัวหนึ่งใน Rust ที่ใช้สำหรับ 
| "แชร์ข้อมูลเดียวกันระหว่างหลาย thread" อย่างปลอดภัย (thread-safe) 
| โดยใช้ reference counting แบบ atomic 
| เพื่อจัดการอายุการใช้งานของข้อมูลให้ถูกต้องอัตโนมัติ
--------------------------------------------------
*/

let data = vec![1, 2, 3];

/*
--------------------------------------------------
| smart pointer (Arc) (2)
--------------------------------------------------
| หากเรา spawn thread หลายตัว แต่ต้องการให้แต่ละ thread 
| เข้าถึง data ตัวเดียวกัน Rust จะไม่ให้ทำโดยตรง เพราะ data ถูก move ไปแล้ว
| ทางออกคือใช้ Arc
--------------------------------------------------
*/

use std::sync::Arc;
use std::thread;

fn main() {
    let data = Arc::new(vec![1, 2, 3]);

    for i in 0..3 {
        let data_clone = Arc::clone(&data);
        thread::spawn(move || {
            println!("Thread {i}: {:?}", data_clone);
        });
    }
}

/*
--------------------------------------------------
| smart pointer (Arc) (3)
--------------------------------------------------
| ต่างจาก Rc (Reference Counted) ที่ใช้ใน single-thread เท่านั้น
| Arc ใช้ atomic operation (CAS) ปลอดภัยเวลานับจำนวน reference ในหลาย thread
| Rc เร็วกว่า แต่ใช้ได้แค่ใน thread เดียว
| Arc ปลอดภัยกับ multi-thread แต่ช้ากว่าเล็กน้อย
--------------------------------------------------
*/
