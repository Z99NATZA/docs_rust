// 2025-10-14 (ymd)


/*
--------------------------------------------------
| Stack (1)
--------------------------------------------------
| - Stack ‡∏Ñ‡∏∑‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö "‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà"
|   ‡πÄ‡∏ä‡πà‡∏ô i32, bool, tuple ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ pointer
| - ‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö LIFO (Last-In, First-Out)
| - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á free ‡πÄ‡∏≠‡∏á)
| - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å scope ‡∏Ñ‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
| - ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
| - ‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ recursion ‡∏•‡∏∂‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏≠‡∏≤‡∏à Stack Overflow
--------------------------------------------------
*/

fn stack_example() {
    let x = 10;   // ‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏ô Stack
    let y = true; // ‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏ô Stack
    println!("{x}, {y}");
} // üßπ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Stack frame ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î




/*
--------------------------------------------------
| Stack (2)
--------------------------------------------------
| - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô Stack ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏°‡∏µ "‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏±‡πâ‡∏ô"
|   ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô compile time
| - ‡∏Å‡∏≤‡∏£ move ‡∏ö‡∏ô Stack ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£ copy ‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
| - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏° scope
--------------------------------------------------
*/

fn stack_move() {
    let a = 5;
    let b = a; // copy ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
    println!("{a}, {b}");
}
// ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ a ‡πÅ‡∏•‡∏∞ b ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô Stack




/*
--------------------------------------------------
| Heap (1)
--------------------------------------------------
| - Heap ‡∏Ñ‡∏∑‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö "‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô"
|   ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏¢‡∏≤‡∏ß (dynamic allocation)
| - ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô smart pointer ‡πÄ‡∏ä‡πà‡∏ô Box, Vec, String, Rc
| - ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠ Rust ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
|   ‡∏ú‡πà‡∏≤‡∏ô Drop trait (‡∏£‡∏∞‡∏ö‡∏ö ownership)
--------------------------------------------------
*/

fn heap_example() {
    let s = String::from("Hello Heap"); // ‡∏™‡∏£‡πâ‡∏≤‡∏á String ‡∏ö‡∏ô Heap
    println!("{s}");
} // üßπ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å scope, String ‡∏ñ‡∏π‡∏Å drop ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô Heap ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥




/*
--------------------------------------------------
| Heap (2)
--------------------------------------------------
| - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô Heap ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ú‡πà‡∏≤‡∏ô pointer
| - ‡πÄ‡∏°‡∏∑‡πà‡∏≠ move ‡∏à‡∏∞‡∏¢‡πâ‡∏≤‡∏¢ "ownership" ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
| - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
| - ‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤ Stack ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡πâ‡∏≠‡∏á allocate/deallocate
--------------------------------------------------
*/

fn heap_move() {
    let s1 = String::from("Rust");
    let s2 = s1; // move ownership
    // println!("{s1}"); ‚ùå error: value moved
    println!("{s2}");
}
// ‚úÖ s1 ‡∏ñ‡∏π‡∏Å move ‡πÑ‡∏õ‡πÉ‡∏´‡πâ s2, ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏ö‡∏ô Heap ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å copy




/*
--------------------------------------------------
| Stack vs Heap (‡∏™‡∏£‡∏∏‡∏õ)
--------------------------------------------------
| Stack:
|   ‚úÖ ‡πÄ‡∏£‡πá‡∏ß, ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà, ‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏±‡πâ‡∏ô, ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á
|   ‚ùå ‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î, ‡∏¢‡πâ‡∏≤‡∏¢‡∏á‡πà‡∏≤‡∏¢ (move/copy)
|
| Heap:
|   ‚úÖ ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô, ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î, ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ‡∏ô‡∏≤‡∏ô
|   ‚ùå ‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤, ‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ pointer ‡πÅ‡∏•‡∏∞ ownership
|
| üîπ ‡πÉ‡∏ô Rust:
|   - ‡∏Ñ‡πà‡∏≤‡∏ö‡∏ô Stack ‡∏à‡∏∞ drop ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏î scope
|   - ‡∏Ñ‡πà‡∏≤‡∏ö‡∏ô Heap ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏î‡∏¢ owner (String, Box, Vec)
|   - borrow checker ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô double free / dangling pointer
--------------------------------------------------
*/
